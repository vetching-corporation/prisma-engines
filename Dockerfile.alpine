### --------------------------------------------------
### 1) Cargo Chef 설치 스테이지
### --------------------------------------------------
FROM rust:1.85-alpine3.21 AS chef

# 빌드 도구 설치
RUN apk update && \
    apk add --no-cache \
        bash \
        curl \
        git \
        musl-dev \
        g++ \
        cmake \
        make \
        openssl-dev \
        llvm-dev \
        clang \
        protobuf \
        binutils \
        linux-headers && \
    cargo install cargo-chef

WORKDIR /app

COPY Cargo.toml Cargo.lock ./
COPY schema-engine schema-engine
COPY query-engine query-engine
COPY libs libs
COPY prisma-fmt prisma-fmt
COPY prisma-schema-wasm prisma-schema-wasm
COPY psl psl
COPY quaint quaint


### --------------------------------------------------
### 2) Cargo Chef 'prepare' 스테이지
###    - 의존성 그래프(recipe.json)를 생성
### --------------------------------------------------
FROM chef AS planner

# cargo-chef를 통해 디펜던시 그래프 생성
RUN cargo chef prepare --recipe-path recipe.json


### --------------------------------------------------
### 3) Cargo Chef 'cook' 스테이지
###    - 실제로 의존성만 먼저 빌드하여 캐시
### --------------------------------------------------
FROM planner AS cacher

WORKDIR /app

# --release 옵션으로 실제 프로덕션 빌드용 의존성 캐시 생성
RUN RUSTFLAGS="-C target-feature=-crt-static" \
    cargo chef cook --release \
        --recipe-path recipe.json \
        -p query-engine-node-api \
        -p schema-engine-cli


### --------------------------------------------------
### 4) 실제 애플리케이션 코드 빌드 스테이지
###    - 의존성 빌드는 캐시된 상태이므로, 전체 소스 복사 후 빠르게 빌드
### --------------------------------------------------
FROM cacher AS builder

WORKDIR /app

# query-engine-node-api, schema-engine-cli 모듈만 빌드
# (workspace 내 다른 바이너리는 필요시 함께 빌드 가능)
RUN RUSTFLAGS="-C target-feature=-crt-static" \
    cargo build --release \
        -p query-engine-node-api \
        -p schema-engine-cli
